function FrontBase(){}function Auth(){this.maskWrapper=$(".mask-wrapper"),this.scrollWrapper=$(".scroll-wrapper")}FrontBase.prototype.run=function(){this.listenAuthBoxHover()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),n=$(".user-more-box");t.hover(function(){n.show()},function(){n.hide()})},Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenSwitchEvent(),t.listenSigninEvent(),t.listenImgCaptchaEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,n=$(".signin-btn"),o=$(".signup-btn"),e=$(".close-btn");n.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),o.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),e.click(function(){t.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var n=this;$(".switch").click(function(){var t=n.scrollWrapper.css("left");(t=parseInt(t))<0?n.scrollWrapper.animate({left:"0"}):n.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listenImgCaptchaEvent=function(){var t=$(".img-captcha");t.click(function(){t.attr("src","/account/img_captcha/?random="+Math.random())})},Auth.prototype.listenSigninEvent=function(){var i=this,t=$(".signin-group"),e=t.find("input[name='telephone']"),r=t.find("input[name='password']"),s=t.find("input[name='remember']");t.find(".submit-btn").click(function(){var t=e.val(),n=r.val(),o=s.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:t,password:n,remember:o?1:0},success:function(t){if(200==t.code)console.log(t.code),i.hideEvent(),window.location.reload();else{console.log(t.code);var n=t.message;if("string"==typeof n||n.constructor==String)console.log(n),window.messageBox.show(n);else for(var o in n){var e=n[o][0];window.messageBox.show(e)}}},fail:function(t){console.log(t)}})})},$(function(){(new FrontBase).run()}),$(function(){(new Auth).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb250X2Jhc2UuanMiXSwibmFtZXMiOlsiRnJvbnRCYXNlIiwiQXV0aCIsInRoaXMiLCJtYXNrV3JhcHBlciIsIiQiLCJzY3JvbGxXcmFwcGVyIiwicHJvdG90eXBlIiwicnVuIiwibGlzdGVuQXV0aEJveEhvdmVyIiwiYXV0aEJveCIsInVzZXJNb3JlQm94IiwiaG92ZXIiLCJzaG93IiwiaGlkZSIsInNlbGYiLCJsaXN0ZW5TaG93SGlkZUV2ZW50IiwibGlzdGVuU3dpdGNoRXZlbnQiLCJsaXN0ZW5TaWduaW5FdmVudCIsImxpc3RlbkltZ0NhcHRjaGFFdmVudCIsInNob3dFdmVudCIsImhpZGVFdmVudCIsInNpZ25pbkJ0biIsInNpZ251cEJ0biIsImNsb3NlQnRuIiwiY2xpY2siLCJjc3MiLCJsZWZ0IiwiY3VycmVudExlZnQiLCJwYXJzZUludCIsImFuaW1hdGUiLCJpbWdDYXB0Y2hhIiwiYXR0ciIsIk1hdGgiLCJyYW5kb20iLCJzaWduaW5Hcm91cCIsInRlbGVwaG9uZUlucHV0IiwiZmluZCIsInBhc3N3b3JkSW5wdXQiLCJyZW1lbWJlcklucHV0IiwidGVsZXBob25lIiwidmFsIiwicGFzc3dvcmQiLCJyZW1lbWJlciIsInByb3AiLCJ4ZnphamF4IiwicG9zdCIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwicmVzdWx0IiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIiwibWVzc2FnZU9iamVjdCIsImNvbnN0cnVjdG9yIiwiU3RyaW5nIiwibWVzc2FnZUJveCIsImtleSIsIm1lc3NhZ2UiLCJmYWlsIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUNBLFNBQVNBLGFBcUJULFNBQVNDLE9BQ0lDLEtBQ0pDLFlBQWNDLEVBQUUsaUJBRFpGLEtBRUpHLGNBQWdCRCxFQUFFLG1CQXBCM0JKLFVBQVVNLFVBQVVDLElBQU0sV0FDWEwsS0FDTk0sc0JBR1RSLFVBQVVNLFVBQVVFLG1CQUFxQixXQUNyQyxJQUFJQyxFQUFVTCxFQUFFLGFBQ1pNLEVBQWNOLEVBQUUsa0JBQ3BCSyxFQUFRRSxNQUFNLFdBQ1ZELEVBQVlFLFFBQ2QsV0FDRUYsRUFBWUcsVUFZcEJaLEtBQUtLLFVBQVVDLElBQU0sV0FDakIsSUFBSU8sRUFBT1osS0FDWFksRUFBS0Msc0JBQ0xELEVBQUtFLG9CQUNMRixFQUFLRyxvQkFDTEgsRUFBS0kseUJBR1RqQixLQUFLSyxVQUFVYSxVQUFZLFdBQ1pqQixLQUNOQyxZQUFZUyxRQUdyQlgsS0FBS0ssVUFBVWMsVUFBWSxXQUNkbEIsS0FDTkMsWUFBWVUsUUFHbkJaLEtBQUtLLFVBQVVTLG9CQUFzQixXQUNqQyxJQUFJRCxFQUFPWixLQUNQbUIsRUFBWWpCLEVBQUUsZUFDZGtCLEVBQVlsQixFQUFFLGVBQ2RtQixFQUFXbkIsRUFBRSxjQUVqQmlCLEVBQVVHLE1BQU0sV0FDWlYsRUFBS0ssWUFDTEwsRUFBS1QsY0FBY29CLElBQUksQ0FBQ0MsS0FBTyxNQUVuQ0osRUFBVUUsTUFBTSxXQUNaVixFQUFLSyxZQUNMTCxFQUFLVCxjQUFjb0IsSUFBSSxDQUFDQyxNQUFRLFFBRXBDSCxFQUFTQyxNQUFNLFdBQ1hWLEVBQUtNLGVBS2JuQixLQUFLSyxVQUFVVSxrQkFBb0IsV0FDL0IsSUFBSUYsRUFBT1osS0FDSUUsRUFBRSxXQUNSb0IsTUFBTSxXQUNYLElBQUlHLEVBQWNiLEVBQUtULGNBQWNvQixJQUFJLFNBQ3pDRSxFQUFjQyxTQUFTRCxJQUNOLEVBRWJiLEVBQUtULGNBQWN3QixRQUFRLENBQUNILEtBQU8sTUFHbkNaLEVBQUtULGNBQWN3QixRQUFRLENBQUNILEtBQU8sY0FLL0N6QixLQUFLSyxVQUFVWSxzQkFBd0IsV0FDbkMsSUFBSVksRUFBYTFCLEVBQUUsZ0JBQ25CMEIsRUFBV04sTUFBTSxXQUNiTSxFQUFXQyxLQUFLLE1BQU8sZ0NBQW1DQyxLQUFLQyxhQUl2RWhDLEtBQUtLLFVBQVVXLGtCQUFvQixXQUMvQixJQUFJSCxFQUFPWixLQUNQZ0MsRUFBYzlCLEVBQUUsaUJBQ2hCK0IsRUFBaUJELEVBQVlFLEtBQUssMkJBQ2xDQyxFQUFnQkgsRUFBWUUsS0FBSywwQkFDakNFLEVBQWdCSixFQUFZRSxLQUFLLDBCQUVyQkYsRUFBWUUsS0FBSyxlQUN2QlosTUFBTSxXQUNaLElBQUllLEVBQVlKLEVBQWVLLE1BQzNCQyxFQUFXSixFQUFjRyxNQUN6QkUsRUFBV0osRUFBY0ssS0FBSyxXQUVsQ0MsUUFBUUMsS0FBSyxDQUNUQyxJQUFPLGtCQUNQQyxLQUFPLENBQ0hSLFVBQWFBLEVBQ2JFLFNBQVlBLEVBQ1pDLFNBQVlBLEVBQVMsRUFBRSxHQUUzQk0sUUFBVyxTQUFVQyxHQUNqQixHQUFxQixLQUFsQkEsRUFBYSxLQUVaQyxRQUFRQyxJQUFJRixFQUFhLE1BQ3pCbkMsRUFBS00sWUFDTGdDLE9BQU9DLFNBQVNDLGFBRWYsQ0FDREosUUFBUUMsSUFBSUYsRUFBYSxNQUN6QixJQUFJTSxFQUFnQk4sRUFBZ0IsUUFDcEMsR0FBNEIsaUJBQWpCTSxHQUE2QkEsRUFBY0MsYUFBZUMsT0FFakVQLFFBQVFDLElBQUlJLEdBQ1pILE9BQU9NLFdBQVc5QyxLQUFLMkMsUUFJdkIsSUFBSSxJQUFJSSxLQUFPSixFQUFjLENBQ3pCLElBQ0lLLEVBRFdMLEVBQWNJLEdBQ04sR0FDdkJQLE9BQU9NLFdBQVc5QyxLQUFLZ0QsTUFLdkNDLEtBQVEsU0FBVUMsR0FDZFosUUFBUUMsSUFBSVcsU0FNNUIxRCxFQUFFLFlBQ2tCLElBQUlKLFdBQ1ZPLFFBR2RILEVBQUUsWUFDYSxJQUFJSCxNQUNWTSIsImZpbGUiOiJmcm9udF9iYXNlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5mdW5jdGlvbiBGcm9udEJhc2UoKSB7XHJcbiAgICBcclxufVxyXG5cclxuRnJvbnRCYXNlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmxpc3RlbkF1dGhCb3hIb3ZlcigpO1xyXG59O1xyXG5cclxuRnJvbnRCYXNlLnByb3RvdHlwZS5saXN0ZW5BdXRoQm94SG92ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXV0aEJveCA9ICQoXCIuYXV0aC1ib3hcIik7XHJcbiAgICB2YXIgdXNlck1vcmVCb3ggPSAkKFwiLnVzZXItbW9yZS1ib3hcIik7XHJcbiAgICBhdXRoQm94LmhvdmVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1c2VyTW9yZUJveC5zaG93KClcclxuICAgIH0sZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHVzZXJNb3JlQm94LmhpZGUoKVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIEF1dGgoKSB7XHJcbiAgICB2YXIgc2VsZj10aGlzO1xyXG4gICAgc2VsZi5tYXNrV3JhcHBlciA9ICQoJy5tYXNrLXdyYXBwZXInKTtcclxuICAgIHNlbGYuc2Nyb2xsV3JhcHBlciA9ICQoJy5zY3JvbGwtd3JhcHBlcicpO1xyXG59XHJcblxyXG5BdXRoLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmxpc3RlblNob3dIaWRlRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU3dpdGNoRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU2lnbmluRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuSW1nQ2FwdGNoYUV2ZW50KCk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5zaG93RXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1hc2tXcmFwcGVyLnNob3coKTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmhpZGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgc2VsZi5tYXNrV3JhcHBlci5oaWRlKCk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5saXN0ZW5TaG93SGlkZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHNpZ25pbkJ0biA9ICQoJy5zaWduaW4tYnRuJyk7XHJcbiAgICB2YXIgc2lnbnVwQnRuID0gJCgnLnNpZ251cC1idG4nKTtcclxuICAgIHZhciBjbG9zZUJ0biA9ICQoJy5jbG9zZS1idG4nKTtcclxuXHJcbiAgICBzaWduaW5CdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuc2hvd0V2ZW50KCk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7XCJsZWZ0XCI6MH0pO1xyXG4gICAgfSk7XHJcbiAgICBzaWdudXBCdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuc2hvd0V2ZW50KCk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7XCJsZWZ0XCI6LTQwMH0pO1xyXG4gICAgfSk7XHJcbiAgICBjbG9zZUJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5oaWRlRXZlbnQoKTtcclxuICAgIH0pO1xyXG5cclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblN3aXRjaEV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHN3aXRjaGVyID0gJChcIi5zd2l0Y2hcIik7XHJcbiAgICBzd2l0Y2hlci5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRMZWZ0ID0gc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyhcImxlZnRcIik7XHJcbiAgICAgICAgY3VycmVudExlZnQgPSBwYXJzZUludChjdXJyZW50TGVmdCk7XHJcbiAgICAgICAgaWYoY3VycmVudExlZnQgPCAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmFuaW1hdGUoe1wibGVmdFwiOicwJ30pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBzZWxmLnNjcm9sbFdyYXBwZXIuYW5pbWF0ZSh7XCJsZWZ0XCI6XCItNDAwcHhcIn0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuQXV0aC5wcm90b3R5cGUubGlzdGVuSW1nQ2FwdGNoYUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGltZ0NhcHRjaGEgPSAkKFwiLmltZy1jYXB0Y2hhXCIpO1xyXG4gICAgaW1nQ2FwdGNoYS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW1nQ2FwdGNoYS5hdHRyKFwic3JjXCIsIFwiL2FjY291bnQvaW1nX2NhcHRjaGEvXCIrXCI/cmFuZG9tPVwiK01hdGgucmFuZG9tKCkpXHJcbiAgICB9KVxyXG59O1xyXG5cclxuQXV0aC5wcm90b3R5cGUubGlzdGVuU2lnbmluRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgc2lnbmluR3JvdXAgPSAkKCcuc2lnbmluLWdyb3VwJyk7XHJcbiAgICB2YXIgdGVsZXBob25lSW5wdXQgPSBzaWduaW5Hcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ndGVsZXBob25lJ11cIik7XHJcbiAgICB2YXIgcGFzc3dvcmRJbnB1dCA9IHNpZ25pbkdyb3VwLmZpbmQoXCJpbnB1dFtuYW1lPSdwYXNzd29yZCddXCIpO1xyXG4gICAgdmFyIHJlbWVtYmVySW5wdXQgPSBzaWduaW5Hcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ncmVtZW1iZXInXVwiKTtcclxuXHJcbiAgICB2YXIgc3VibWl0QnRuID0gc2lnbmluR3JvdXAuZmluZCgnLnN1Ym1pdC1idG4nKTtcclxuICAgIHN1Ym1pdEJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRlbGVwaG9uZSA9IHRlbGVwaG9uZUlucHV0LnZhbCgpO1xyXG4gICAgICAgIHZhciBwYXNzd29yZCA9IHBhc3N3b3JkSW5wdXQudmFsKCk7XHJcbiAgICAgICAgdmFyIHJlbWVtYmVyID0gcmVtZW1iZXJJbnB1dC5wcm9wKFwiY2hlY2tlZFwiKTtcclxuXHJcbiAgICAgICAgeGZ6YWpheC5wb3N0KHtcclxuICAgICAgICAgICAgJ3VybCc6ICcvYWNjb3VudC9sb2dpbi8nLFxyXG4gICAgICAgICAgICAnZGF0YSc6e1xyXG4gICAgICAgICAgICAgICAgJ3RlbGVwaG9uZSc6IHRlbGVwaG9uZSxcclxuICAgICAgICAgICAgICAgICdwYXNzd29yZCc6IHBhc3N3b3JkLFxyXG4gICAgICAgICAgICAgICAgJ3JlbWVtYmVyJzogcmVtZW1iZXI/MTowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT0gMjAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFsnY29kZSddKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmhpZGVFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFsnY29kZSddKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZU9iamVjdCA9IHJlc3VsdFsnbWVzc2FnZSddO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZU9iamVjdCA9PSAnc3RyaW5nJyB8fCBtZXNzYWdlT2JqZWN0LmNvbnN0cnVjdG9yID09IFN0cmluZylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2VPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93KG1lc3NhZ2VPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBtZXNzYWdlT2JqZWN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IG1lc3NhZ2VPYmplY3Rba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnZmFpbCc6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KVxyXG59O1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZnJvbnRCYXNlID0gbmV3IEZyb250QmFzZSgpO1xyXG4gICAgZnJvbnRCYXNlLnJ1bigpO1xyXG59KTtcclxuXHJcbiQoZnVuY3Rpb24oKXtcclxuICAgIHZhciBhdXRoID0gbmV3IEF1dGgoKTtcclxuICAgIGF1dGgucnVuKCk7XHJcbn0pOyJdfQ==
