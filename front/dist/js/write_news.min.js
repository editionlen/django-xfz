function News(){}News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{initialFrameHeight:400,serverUrl:"/ueditor/upload/"})},News.prototype.listenUploadFielEvent=function(){var t=$("#thumbnail-btn");t.change(function(){var e=t[0].files[0],o=new FormData;o.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:o,processData:!1,contentType:!1,success:function(e){if(200===e.code){var o=e.data.url;$("#thumbnail-form").val(o)}}})})},News.prototype.listenQiniuUploadFileEvent=function(){var a=this;$("#thumbnail-btn").change(function(){var r=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var o=e.data.token,t=(new Date).getTime()+"."+r.name.split(".")[1],n={fname:t,params:{},mimeType:["image/png","image/jpeg","image/gif","video/mp4"]},i={useCdnDomain:!0,retryCount:6,region:qiniu.region.z2};qiniu.upload(r,t,o,n,i).subscribe({next:a.handleFileUploadProgress,error:a.handleFileUploadError,complete:a.handleFileUploadComplete})}}})})},News.prototype.handleFileUploadProgress=function(e){var o=e.total.percent.toFixed(0)+"%";News.progressGroup.show();var t=$(".progress-bar");t.css({width:o}),t.text(o)},News.prototype.handleFileUploadError=function(e){console.log(e.message)},News.prototype.handleFileUploadComplete=function(e){console.log(e),News.progressGroup.hide();var o="http://q036lyvu6.bkt.clouddn.com/"+e.key;$("input[name='thumbnail']").val(o)},News.prototype.run=function(){this.initUEditor(),this.listenQiniuUploadFileEvent()},$(function(){(new News).run(),News.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlX25ld3MuanMiXSwibmFtZXMiOlsiTmV3cyIsInByb3RvdHlwZSIsImluaXRVRWRpdG9yIiwid2luZG93IiwidWUiLCJVRSIsImdldEVkaXRvciIsImluaXRpYWxGcmFtZUhlaWdodCIsInNlcnZlclVybCIsImxpc3RlblVwbG9hZEZpZWxFdmVudCIsInVwbG9hZEJ0biIsIiQiLCJjaGFuZ2UiLCJmaWxlIiwiZmlsZXMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwieGZ6YWpheCIsInBvc3QiLCJ1cmwiLCJkYXRhIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ2YWwiLCJsaXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCIsInNlbGYiLCJ0aGlzIiwiZ2V0IiwidG9rZW4iLCJrZXkiLCJEYXRlIiwiZ2V0VGltZSIsIm5hbWUiLCJzcGxpdCIsInB1dEV4dHJhIiwiZm5hbWUiLCJwYXJhbXMiLCJtaW1lVHlwZSIsImNvbmZpZyIsInVzZUNkbkRvbWFpbiIsInJldHJ5Q291bnQiLCJyZWdpb24iLCJxaW5pdSIsInoyIiwidXBsb2FkIiwic3Vic2NyaWJlIiwibmV4dCIsImhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyIsImVycm9yIiwiaGFuZGxlRmlsZVVwbG9hZEVycm9yIiwiY29tcGxldGUiLCJoYW5kbGVGaWxlVXBsb2FkQ29tcGxldGUiLCJyZXNwb25zZSIsInBlcmNlbnRUZXh0IiwidG90YWwiLCJwZXJjZW50IiwidG9GaXhlZCIsInByb2dyZXNzR3JvdXAiLCJzaG93IiwicHJvZ3Jlc3NCYXIiLCJjc3MiLCJ3aWR0aCIsInRleHQiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsImhpZGUiLCJydW4iXSwibWFwcGluZ3MiOiJBQUNBLFNBQVNBLFFBSVRBLEtBQUtDLFVBQVVDLFlBQWMsV0FDekJDLE9BQU9DLEdBQUtDLEdBQUdDLFVBQVUsU0FBUyxDQUM5QkMsbUJBQXNCLElBQ3RCQyxVQUFhLHNCQUlyQlIsS0FBS0MsVUFBVVEsc0JBQXdCLFdBQ25DLElBQUlDLEVBQVlDLEVBQUUsa0JBQ2xCRCxFQUFVRSxPQUFPLFdBQ2IsSUFBSUMsRUFBT0gsRUFBVSxHQUFHSSxNQUFNLEdBQzFCQyxFQUFXLElBQUlDLFNBQ25CRCxFQUFTRSxPQUFPLE9BQU9KLEdBQ3ZCSyxRQUFRQyxLQUFLLENBQ1RDLElBQU0sb0JBQ05DLEtBQVFOLEVBQ1JPLGFBQWUsRUFDZkMsYUFBZSxFQUNmQyxRQUFXLFNBQVVDLEdBQ2pCLEdBQXNCLE1BQW5CQSxFQUFhLEtBQVUsQ0FFdEIsSUFBSUwsRUFBTUssRUFBYSxLQUFPLElBQ1RkLEVBQUUsbUJBQ1JlLElBQUlOLFVBT3ZDcEIsS0FBS0MsVUFBVTBCLDJCQUE2QixXQUN4QyxJQUFJQyxFQUFPQyxLQUNLbEIsRUFBRSxrQkFDUkMsT0FBTyxXQUNiLElBQUlDLEVBQU9nQixLQUFLZixNQUFNLEdBQ3RCSSxRQUFRWSxJQUFJLENBQ1JWLElBQU8sZ0JBQ1BJLFFBQVcsU0FBU0MsR0FDaEIsR0FBc0IsTUFBbkJBLEVBQWEsS0FBVSxDQUN0QixJQUFJTSxFQUFRTixFQUFhLEtBQVMsTUFDOUJPLEdBQU0sSUFBS0MsTUFBUUMsVUFBWSxJQUFNckIsRUFBS3NCLEtBQUtDLE1BQU0sS0FBSyxHQUMxREMsRUFBVyxDQUNYQyxNQUFPTixFQUNQTyxPQUFRLEdBQ1JDLFNBQVUsQ0FBQyxZQUFhLGFBQWMsWUFBYSxjQUVuREMsRUFBUyxDQUNUQyxjQUFjLEVBQ2RDLFdBQVksRUFDWkMsT0FBT0MsTUFBTUQsT0FBT0UsSUFFUEQsTUFBTUUsT0FBT2xDLEVBQU1tQixFQUFLRCxFQUFPTSxFQUFVSSxHQUMvQ08sVUFBVSxDQUNqQkMsS0FBUXJCLEVBQUtzQix5QkFDYkMsTUFBU3ZCLEVBQUt3QixzQkFDZEMsU0FBWXpCLEVBQUswQixrQ0FRekN0RCxLQUFLQyxVQUFVaUQseUJBQTJCLFNBQVVLLEdBQ2xELElBRUlDLEVBRlFELEVBQVNFLE1BQ0RDLFFBQ01DLFFBQVEsR0FBSyxJQUNuQjNELEtBQUs0RCxjQUNYQyxPQUNkLElBQUlDLEVBQWNuRCxFQUFFLGlCQUNwQm1ELEVBQVlDLElBQUksQ0FBQ0MsTUFBUVIsSUFDekJNLEVBQVlHLEtBQUtULElBR25CeEQsS0FBS0MsVUFBVW1ELHNCQUF3QixTQUFVRCxHQUM3Q2UsUUFBUUMsSUFBSWhCLEVBQU1pQixVQUd0QnBFLEtBQUtDLFVBQVVxRCx5QkFBMkIsU0FBVUMsR0FDaERXLFFBQVFDLElBQUlaLEdBQ1F2RCxLQUFLNEQsY0FDWFMsT0FFZCxJQUVJakQsRUFGUyxvQ0FDQ21DLEVBQVN2QixJQUVGckIsRUFBRSwyQkFDUmUsSUFBSU4sSUFHdkJwQixLQUFLQyxVQUFVcUUsSUFBTSxXQUNOekMsS0FDTjNCLGNBRE0yQixLQUVORiw4QkFJVGhCLEVBQUUsWUFDYSxJQUFJWCxNQUNWc0UsTUFFTHRFLEtBQUs0RCxjQUFnQmpELEVBQUUiLCJmaWxlIjoid3JpdGVfbmV3cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZnVuY3Rpb24gTmV3cygpIHtcclxuICAgIFxyXG59XHJcblxyXG5OZXdzLnByb3RvdHlwZS5pbml0VUVkaXRvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHdpbmRvdy51ZSA9IFVFLmdldEVkaXRvcignZWRpdG9yJyx7XHJcbiAgICAgICAgJ2luaXRpYWxGcmFtZUhlaWdodCc6IDQwMCxcclxuICAgICAgICAnc2VydmVyVXJsJzogJy91ZWRpdG9yL3VwbG9hZC8nXHJcbiAgICB9KTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmxpc3RlblVwbG9hZEZpZWxFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB1cGxvYWRCdG4gPSAkKCcjdGh1bWJuYWlsLWJ0bicpO1xyXG4gICAgdXBsb2FkQnRuLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZpbGUgPSB1cGxvYWRCdG5bMF0uZmlsZXNbMF07XHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJyxmaWxlKTtcclxuICAgICAgICB4ZnphamF4LnBvc3Qoe1xyXG4gICAgICAgICAgICAndXJsJzonL2Ntcy91cGxvYWRfZmlsZS8nLFxyXG4gICAgICAgICAgICAnZGF0YSc6IGZvcm1EYXRhLFxyXG4gICAgICAgICAgICAncHJvY2Vzc0RhdGEnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ2NvbnRlbnRUeXBlJzogZmFsc2UsXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT09IDIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0WydkYXRhJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSByZXN1bHRbJ2RhdGEnXVsndXJsJ107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRodW1ibmFpbElucHV0ID0gJChcIiN0aHVtYm5haWwtZm9ybVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmxpc3RlblFpbml1VXBsb2FkRmlsZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHVwbG9hZEJ0biA9ICQoJyN0aHVtYm5haWwtYnRuJyk7XHJcbiAgICB1cGxvYWRCdG4uY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbMF07XHJcbiAgICAgICAgeGZ6YWpheC5nZXQoe1xyXG4gICAgICAgICAgICAndXJsJzogJy9jbXMvcW50b2tlbi8nLFxyXG4gICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uKHJlc3VsdCl7XHJcbiAgICAgICAgICAgICAgICBpZihyZXN1bHRbJ2NvZGUnXSA9PT0gMjAwKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSByZXN1bHRbJ2RhdGEnXVsndG9rZW4nXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArICcuJyArIGZpbGUubmFtZS5zcGxpdCgnLicpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwdXRFeHRyYSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6IFsnaW1hZ2UvcG5nJywgXCJpbWFnZS9qcGVnXCIsIFwiaW1hZ2UvZ2lmXCIsIFwidmlkZW8vbXA0XCJdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VDZG5Eb21haW46IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5Q291bnQ6IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjpxaW5pdS5yZWdpb24uejJcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gcWluaXUudXBsb2FkKGZpbGUsIGtleSwgdG9rZW4sIHB1dEV4dHJhLCBjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQnOiBzZWxmLmhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yJzogc2VsZi5oYW5kbGVGaWxlVXBsb2FkRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb21wbGV0ZSc6IHNlbGYuaGFuZGxlRmlsZVVwbG9hZENvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gIHZhciB0b3RhbCA9IHJlc3BvbnNlLnRvdGFsO1xyXG4gIHZhciBwZXJjZW50ID0gdG90YWwucGVyY2VudDtcclxuICB2YXIgcGVyY2VudFRleHQgPSBwZXJjZW50LnRvRml4ZWQoMCkgKyAnJSc7XHJcbiAgdmFyIHByb2dyZXNzR3JvdXAgPSBOZXdzLnByb2dyZXNzR3JvdXA7XHJcbiAgcHJvZ3Jlc3NHcm91cC5zaG93KCk7XHJcbiAgdmFyIHByb2dyZXNzQmFyID0gJChcIi5wcm9ncmVzcy1iYXJcIik7XHJcbiAgcHJvZ3Jlc3NCYXIuY3NzKHtcIndpZHRoXCI6cGVyY2VudFRleHR9KTtcclxuICBwcm9ncmVzc0Jhci50ZXh0KHBlcmNlbnRUZXh0KTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XHJcbn07XHJcblxyXG5OZXdzLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkQ29tcGxldGUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgIHZhciBwcm9ncmVzc0dyb3VwID0gTmV3cy5wcm9ncmVzc0dyb3VwO1xyXG4gICAgcHJvZ3Jlc3NHcm91cC5oaWRlKCk7XHJcblxyXG4gICAgdmFyIGRvbWFpbiA9IFwiaHR0cDovL3EwMzZseXZ1Ni5ia3QuY2xvdWRkbi5jb20vXCI7XHJcbiAgICB2YXIgZmlsZW5hbWUgPXJlc3BvbnNlLmtleTtcclxuICAgIHZhciB1cmwgPSBkb21haW4gKyBmaWxlbmFtZTtcclxuICAgIHZhciB0aHVtYm5haWxJbnB1dCA9ICQoXCJpbnB1dFtuYW1lPSd0aHVtYm5haWwnXVwiKTtcclxuICAgIHRodW1ibmFpbElucHV0LnZhbCh1cmwpO1xyXG59O1xyXG5cclxuTmV3cy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5pbml0VUVkaXRvcigpO1xyXG4gICAgc2VsZi5saXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCgpO1xyXG4gICAgLy9zZWxmLmxpc3RlblVwbG9hZEZpZWxFdmVudCgpO1xyXG59O1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbmV3cyA9IG5ldyBOZXdzKCk7XHJcbiAgICBuZXdzLnJ1bigpO1xyXG5cclxuICAgIE5ld3MucHJvZ3Jlc3NHcm91cCA9ICQoXCIjcHJvZ3Jlc3MtZ3JvdXBcIik7XHJcbn0pOyJdfQ==
